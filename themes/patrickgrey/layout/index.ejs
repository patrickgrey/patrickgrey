    <a class="pg-accessible-hide-visual" href="#posts">Jump to posts</a>

    <%- partial('_partial/about', {class_name: 'pg-about'}) %>

    <div class="pg-posts" id="posts">
        
                        
        <h1 class="pg-blog-list-title" id="blog">Blog</h1>

        <!-- <div class="pg-search-posts-container">
            <label for="pgSearchPosts">Search posts:</label>
            <input id="pgSearchPosts" type="text" placeholder="Type here" v-model="search">
        </div> -->

        <span class="input input--haruki" v-bind:class="{ 'input--filled': isSearching}">
            <input class="input__field input__field--haruki" type="text" id="searchInput01" v-model="search" />
            <label class="input__label input__label--haruki" for="searchInput01">
                <span class="input__label-content input__label-content--haruki" v-if="!isSearching">Type to search posts</span>
                <span class="input__label-content input__label-content--haruki pg-hide" v-else v-cloak>{{filteredList.length}} posts found</span>
            </label>
        </span>

        <div class="pg-posts-container-no-search" v-if="!isLoaded">
            <!-- <p>No search</p> -->
            <% site.posts.sort('date', -1).limit(10).each(function(post){ %>
                <div class="pg-post">
                    <h2 class="pg-post-title"><a class="pg-post-goto-link" href="<%- url_for(post.path) %>"><%= post.title || '(no title)' %></a></h2>
                    <p class="pg-post-date"><%= post.date.format('dddd, Do MMMM YYYY') || 'no date provided' %></p>
                    
                </div>
            <% }) %>
        </div>

        <div class="pg-posts-container-search"  v-cloak>
            <!-- <p>Is searching</p> -->
            <div class="pg-post" v-for="post in filteredList">
                    <h2 class="pg-post-title"><a class="pg-post-goto-link" :href="post.slug" v-html="$options.filters.highlight(post.title, search)"></a></h2>
                    <p class="pg-post-date">{{ post.date }}</p>     
            </div>
        </div>

        <a class="pg-goto-top" href="#blog" v-if="filteredList.length > 0">^ Go to top</a>


    </div> <!-- pg-posts -->

    <%- js('scripts/vendors.min.js') %>

    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js"></script> -->
    
    <script>
        var allPosts = {"posts": [
            <% site.posts.sort('date', -1).each(function(post){ %>
                {title: "<%= post.title %>", slug: "<%= post.slug %>", date: "<%= post.date.format('dddd, Do MMMM YYYY') %>" },
            <% }) %>      
        ]};

                
        // highlight filter
        // https://github.com/vuejs/vue/issues/322
        Vue.filter('highlight', function(words, query){
            // console.log("query: "+query+": end.");
           if (query === '') return words;
            var iQuery = new RegExp(query, "ig");
            return words.toString().replace(iQuery, function(matchedTxt,a,b){
                return ('<span class=\'highlight\'>' + matchedTxt + '</span>');
            });
        });

        var app = new Vue({
            el: '#posts', // Only apply application to part of the static page.
            data: {
                search: '', //string typed in by user
                isLoaded: true, //Boolean used to show/hide the static and vue lists of posts.
                posts: allPosts.posts // All posts from JSON above.
            },
            computed: {
                filteredList: function() { // Filter posts list based on search string 
                    // console.log(this.isSearching);
                    var that = this;
                    if(this.isSearching) {
                        gtag('event', 'search', {
                            search_term: that.search
                        });
                        
                        return that.posts.filter(function (post) {
                            return post.title.toLowerCase().indexOf(that.search.toLowerCase()) >= 0;
                        });
                    }
                    else {
                        return this.posts;
                    }
                },
                isSearching: function() { // Boolean. If not searching, add class to prevent input field effect from returning to non-searching state.
                    return this.search.length > 0;
                }
            }
        })
    </script>

